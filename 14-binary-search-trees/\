
class Node():
    def __init__(self, data, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

    def __repr__(self):
        return f"Node({self.data}, {self.left}, {self.right})"


def my_check_bst(tree):
    """
    Invalid - fails 3rd example
    Check that tree conforms to the BST property
    Last check 
    >>> my_check_bst(Node(5, Node(3), Node(7)))
    True
    >>> my_check_bst(Node(5, Node(6), Node(7)))
    False
    >>> my_check_bst(Node(5, Node(3, Node(1), Node(6)), Node(7)))
    False
    """
    if not tree:
        return True
    elif tree.left and tree.left.data > tree.data:
        return False
    elif tree.right and tree.right.data < tree.data:
        return False
    else:
        return my_check_bst(tree.left) and my_check_bst(tree.right)


def book_check_bst1(tree):
    """
    Simple but inefficient method: check max left <= data and max right >= data
    My attempt for practice
    >>> my_check_bst(Node(5, Node(3), Node(7)))
    True
    >>> my_check_bst(Node(5, Node(6), Node(7)))
    False
    >>> my_check_bst(Node(5, Node(3, Node(1), Node(6)), Node(7)))
    False
    """
    def tree_max(tree):
        if not tree.left and not tree.right:
            return tree.data
        elif not tree.right:
            return max([tree.data, tree_max(tree.left)])
        elif not tree.left:
            return max([tree.data, tree_max(tree.right)])
        else:
            return max([tree.data, tree_max(tree.left), tree_max(tree.right)])

    if not tree:
        return True
    else:
        return (not tree.left or tree_max(tree.left) <= tree.data
                and not tree.right or tree_max(tree.right) >= tree.data)

